<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>weby Lab</title>
	<link rel="stylesheet" type="text/css" href="../index.css">
</head>
<body>
<!--- <ul id="msgs"></ul>-->
<canvas id="canvas"></canvas>
<canvas id="sakura"></canvas>
</body>
</html>
<script>
  window.addEventListener('load', () => {
    let msgbox = document.getElementById('msgs');
    let form = document.getElementById('form');
    let sendMsg = document.getElementById('send-msg');
    let ws = new WebSocket('ws://' + window.location.host + '/websocket');

    ws.onopen = () => console.log('connection opened');
    ws.onclose = () => console.log('connection closed');
    ws.onmessage = m => {
      if (m.data=="ver"){
				var order = <%= session[:number] %>
				var	waitingTime=(order-1)*(0.15*11)
				console.log(waitingTime)
				setTimeout("act()", waitingTime*1000);
			}else{
        var divide = parseInt(m.data)
        var order = <%= session[:number] %>
        show_tree(divide,order)
			}
    }

    sendMsg.addEventListener('click', () => sendMsg.value = '');

    form.addEventListener('submit', e => {
      ws.send(sendMsg.value);
      sendMsg.value = '';
      e.preventDefault();
    });
	});


  //show_tree()
  function show_tree(divide,order){
    var img = new Image();
    img.src = "./branch.svg";
    var cvs = document.getElementById('canvas');
    var ctx = cvs.getContext('2d');
    var width = window.innerWidth;
    var height = window.innerHeight;
    var ss = 1430/divide
    var vv =290/divide

    img.onload = function(){
      ctx.imageSmoothingEnabled = true;
      //ctx.drawImage(img,90,0,ss,ss*(820/1440),0,0,width,height)
      ctx.drawImage(img,vv*(order-1),0,ss,500,0,0,width,height)
    }
  }

	var cvsakura = document.getElementById('sakura');
		var ctsakura = cvsakura.getContext('2d');
		var imgsakura = new Image();
		imgsakura.src = "./flower.png";
		ctsakura.imageSmoothingEnabled = true;
		var sakuraCount = 0
function act() {

    // パラメータが無くなっていれば終了
    if(sakuraCount==10) {
			sakuraCount=0
			return};
    // 配列の先頭を使う

	tate = getRandomArbitrary(4,80)
	yoko = getRandomArbitrary(1,290)
    //TODO: 何かの処理
    ctsakura.drawImage(imgsakura,(sakuraCount+1)*29,tate,36,30);

    // 処理済みのパラメータ削除
    // 次の回の実行予約
    setTimeout(function(){
				act();
				console.log(sakuraCount)
				sakuraCount ++
		}, 150);
    // これで１回の処理は終了
}

function getRandomArbitrary(min, max) {
  return Math.random() * (max - min) + min;
}
</script>